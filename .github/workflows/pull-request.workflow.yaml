---
name: CI for pull requests

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  update_release_draft:
    name: Tagging pull requests by release-drafter
    permissions:
      contents: write
      pull-requests: write
      issues: write
    runs-on: ubuntu-latest
    steps:
      - uses: release-drafter/release-drafter@v6.1.0
        with:
          config-name: release-drafter.conf.yaml
          commitish: main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'src/**'
              - 'package.json'
              - 'package-lock.json'

  dependency-scanner:
    name: Dependency Scanner
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check if deps (package*.json) changed # Alternativamente poderia usar o dorny/paths-filter
        id: check-changes
        run: |
          if git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -E "(package\.json|package-lock\.json)"; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Security audit
        if: steps.check-changes.outputs.changed == 'true'
        run: npm audit --audit-level high

  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Build .env
        run: |
          echo "NODE_ENV=test" > .env.test
          echo "PORT=3000" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "REDIS_PREFIX=test:" >> .env.test
          echo "PAYMENT_PROCESSOR_URL_DEFAULT=http://localhost:8001" >> .env.test
          echo "PAYMENT_PROCESSOR_URL_FALLBACK=http://localhost:8002" >> .env.test
          echo "PAYMENT_PROCESSOR_RETRY_LIMIT_BEFORE_USE_FALLBACK=2" >> .env

      - name: Install dependencies
        run: |
          npm ci --force --no-audit
          npm install @rollup/rollup-linux-x64-gnu --save-optional

      - name: Run tests
        run: npm test

  k6-tests:
    name: K6 Load Test
    runs-on: ubuntu-latest
    needs:
      - test-suite
      - changes
    if: ${{ needs.changes.outputs.backend == 'true' && (github.event_name == 'pull_request' || github.event_name == 'push') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y

      - name: Start services
        run: docker-compose -f vendor/docker-compose.yml up -d
      - run: docker-compose -f compose.yaml up --build -d

      - name: Wait for services to start
        run: sleep 30

      - name: Setup K6 and run load test
        uses: grafana/setup-k6-action@v1.1.0
      - uses: grafana/run-k6-action@v1.2.0
        with:
          path: tests/integration-test/rinha.js

      - name: Cool down
        run: sleep 15
      - name: Cleanup
        if: always()
        run: docker-compose -f compose.yaml down --rmi all
      - run: sleep 10
      - run: docker-compose -f vendor/docker-compose.yml down --rmi all

